# Configuration file
# key = value

## Logging
%test.quarkus.log.console.level=INFO
%test.quarkus.log.category."com.redhat.examples.quarkus".level=DEBUG
%test.quarkus.log.category."org.flywaydb".level=ERROR
%test.quarkus.log.category."org.apache.kafka".level=ERROR

## Datasource
%dev.quarkus.datasource.url = jdbc:postgresql://localhost:5432/coffeeshop-dev?currentSchema=dev
%dev.quarkus.datasource.driver = org.postgresql.Driver
%dev.quarkus.datasource.username = quarkusdev
%dev.quarkus.datasource.password = redhat-19
%dev.quarkus.hibernate-orm.log.sql=true

%test.quarkus.datasource.url = jdbc:h2:./target/test-db/test;INIT=CREATE SCHEMA IF NOT EXISTS TEST\\;SET SCHEMA TEST
%test.quarkus.datasource.driver = org.h2.Driver
#%test.quarkus.datasource.username = username-default
#%test.quarkus.datasource.password = redhat-19
%test.quarkus.hibernate-orm.log.sql=true;

quarkus.datasource.url = jdbc:postgresql://localhost:5432/coffeeshop-prod?currentSchema=prod
quarkus.datasource.driver = org.postgresql.Driver
quarkus.datasource.username = quarkusdev
quarkus.datasource.password = redhat-19
quarkus.hibernate-orm.log.sql=true

## Hibernate
# drop and create the database at startup (use `update` to only update the schema)
%dev.quarkus.hibernate-orm.database.generation = drop-and-create

## Flyway

# Flyway minimal config properties
%test.quarkus.flyway.migrate-at-start=false

# Flyway optional config properties
%test.quarkus.flyway.baseline-on-migrate=true
%test.quarkus.flyway.baseline-version=0.0.0
%test.quarkus.flyway.baseline-description=Initial version
%test.quarkus.flyway.connect-retries=10
%test.quarkus.flyway.schemas=TEST
%test.quarkus.flyway.table=flyway_quarkus_history
%test.quarkus.flyway.locations=db/migration
%test.quarkus.flyway.sql-migration-prefix=V
%test.quarkus.flyway.repeatable-sql-migration-prefix=R

## Kafka/Reactive Messaging

### Barista

#### Outgoing (Emitter)
%test.mp.messaging.outgoing.coffee-orders-in.connector=smallrye-kafka
%test.mp.messaging.outgoing.coffee-orders-in.value.serializer=org.apache.kafka.common.serialization.StringSerializer

#### Incoming
%test.mp.messaging.incoming.coffee-orders-up.connector=smallrye-kafka
%test.mp.messaging.incoming.coffee-orders-up.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
%test.mp.messaging.incoming.coffee-orders-up.auto.offset.reset=earliest
%test.mp.messaging.incoming.coffee-orders-up.group.id=coffeeshop
%test.mp.messaging.incoming.coffee-orders-up.topic=orders


### Kitchen topic
# mp.messaging.incoming.orders.connector=smallrye-kafka
# mp.messaging.incoming.orders.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
# mp.messaging.incoming.orders.auto.offset.reset=earliest
# mp.messaging.incoming.orders.group.id=coffeeshop
# mp.messaging.incoming.orders.topic=orders

## Queue topic
# mp.messaging.outgoing.kitchen.connector=smallrye-kafka
# mp.messaging.outgoing.kitchen.topic=kitchen
# mp.messaging.outgoing.kitchen.value.serializer=org.apache.kafka.common.serialization.StringSerializer

